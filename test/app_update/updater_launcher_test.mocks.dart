// Mocks generated by Mockito 5.4.6 from annotations
// in streamkeys/test/app_update/updater_launcher_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:streamkeys/desktop/utils/process_runner.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProcess_0 extends _i1.SmartFake implements _i2.Process {
  _FakeProcess_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProcessRunner].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcessRunner extends _i1.Mock implements _i3.ProcessRunner {
  MockProcessRunner() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ProcessResult> run(
    String? executable,
    List<String>? arguments, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i5.Encoding? stdoutEncoding = const _i2.SystemEncoding(),
    _i5.Encoding? stderrEncoding = const _i2.SystemEncoding(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #run,
          [
            executable,
            arguments,
          ],
          {
            #workingDirectory: workingDirectory,
            #environment: environment,
            #includeParentEnvironment: includeParentEnvironment,
            #runInShell: runInShell,
            #stdoutEncoding: stdoutEncoding,
            #stderrEncoding: stderrEncoding,
          },
        ),
        returnValue: _i4.Future<_i2.ProcessResult>.value(
            _i6.dummyValue<_i2.ProcessResult>(
          this,
          Invocation.method(
            #run,
            [
              executable,
              arguments,
            ],
            {
              #workingDirectory: workingDirectory,
              #environment: environment,
              #includeParentEnvironment: includeParentEnvironment,
              #runInShell: runInShell,
              #stdoutEncoding: stdoutEncoding,
              #stderrEncoding: stderrEncoding,
            },
          ),
        )),
      ) as _i4.Future<_i2.ProcessResult>);

  @override
  _i4.Future<_i2.Process> start(
    String? executable,
    List<String>? arguments, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i2.ProcessStartMode? mode = _i2.ProcessStartMode.normal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [
            executable,
            arguments,
          ],
          {
            #workingDirectory: workingDirectory,
            #environment: environment,
            #includeParentEnvironment: includeParentEnvironment,
            #runInShell: runInShell,
            #mode: mode,
          },
        ),
        returnValue: _i4.Future<_i2.Process>.value(_FakeProcess_0(
          this,
          Invocation.method(
            #start,
            [
              executable,
              arguments,
            ],
            {
              #workingDirectory: workingDirectory,
              #environment: environment,
              #includeParentEnvironment: includeParentEnvironment,
              #runInShell: runInShell,
              #mode: mode,
            },
          ),
        )),
      ) as _i4.Future<_i2.Process>);
}
