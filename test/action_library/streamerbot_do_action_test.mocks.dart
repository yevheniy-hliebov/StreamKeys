// Mocks generated by Mockito 5.4.6 from annotations
// in streamkeys/test/action_library/streamerbot_do_action_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter/foundation.dart' as _i7;
import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:streamkeys/common/models/connection_status.dart' as _i12;
import 'package:streamkeys/desktop/features/action_library/data/models/binding_action_icons.dart'
    as _i13;
import 'package:streamkeys/desktop/features/streamerbot/data/models/do_action_response.dart'
    as _i3;
import 'package:streamkeys/desktop/features/streamerbot/data/models/get_actions_response.dart'
    as _i2;
import 'package:streamkeys/desktop/features/streamerbot/data/models/streamerbot_action.dart'
    as _i10;
import 'package:streamkeys/desktop/features/streamerbot/data/models/streamerbot_connection_data.dart'
    as _i5;
import 'package:streamkeys/desktop/features/streamerbot/data/services/streamerbot_service.dart'
    as _i11;
import 'package:streamkeys/desktop/features/streamerbot/data/services/streamerbot_web_socket.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetActionsResponse_0 extends _i1.SmartFake
    implements _i2.GetActionsResponse {
  _FakeGetActionsResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDoActionResponse_1 extends _i1.SmartFake
    implements _i3.DoActionResponse {
  _FakeDoActionResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamerBotWebSocket_2 extends _i1.SmartFake
    implements _i4.StreamerBotWebSocket {
  _FakeStreamerBotWebSocket_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamerBotConnectionData_3 extends _i1.SmartFake
    implements _i5.StreamerBotConnectionData {
  _FakeStreamerBotConnectionData_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBuildContext_4 extends _i1.SmartFake implements _i6.BuildContext {
  _FakeBuildContext_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_5 extends _i1.SmartFake implements _i6.Widget {
  _FakeWidget_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [StreamerBotWebSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamerBotWebSocket extends _i1.Mock
    implements _i4.StreamerBotWebSocket {
  MockStreamerBotWebSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get generatedId => (super.noSuchMethod(
        Invocation.getter(#generatedId),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#generatedId),
        ),
      ) as String);

  @override
  _i9.Future<void> connect(
    String? url, {
    String? password,
    _i4.EventHandler? fallbackEventHandler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [url],
          {
            #password: password,
            #fallbackEventHandler: fallbackEventHandler,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i2.GetActionsResponse> getActions() => (super.noSuchMethod(
        Invocation.method(
          #getActions,
          [],
        ),
        returnValue:
            _i9.Future<_i2.GetActionsResponse>.value(_FakeGetActionsResponse_0(
          this,
          Invocation.method(
            #getActions,
            [],
          ),
        )),
      ) as _i9.Future<_i2.GetActionsResponse>);

  @override
  _i9.Future<_i10.StreamerBotAction?> getAction(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAction,
          [id],
        ),
        returnValue: _i9.Future<_i10.StreamerBotAction?>.value(),
      ) as _i9.Future<_i10.StreamerBotAction?>);

  @override
  _i9.Future<_i3.DoActionResponse> doAction({
    required String? id,
    required String? name,
    Map<String, dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #doAction,
          [],
          {
            #id: id,
            #name: name,
            #args: args,
          },
        ),
        returnValue:
            _i9.Future<_i3.DoActionResponse>.value(_FakeDoActionResponse_1(
          this,
          Invocation.method(
            #doAction,
            [],
            {
              #id: id,
              #name: name,
              #args: args,
            },
          ),
        )),
      ) as _i9.Future<_i3.DoActionResponse>);
}

/// A class which mocks [StreamerBotService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamerBotService extends _i1.Mock
    implements _i11.StreamerBotService {
  MockStreamerBotService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.StreamerBotWebSocket get webSocket => (super.noSuchMethod(
        Invocation.getter(#webSocket),
        returnValue: _FakeStreamerBotWebSocket_2(
          this,
          Invocation.getter(#webSocket),
        ),
      ) as _i4.StreamerBotWebSocket);

  @override
  _i9.Stream<_i12.ConnectionStatus> get connectionStream => (super.noSuchMethod(
        Invocation.getter(#connectionStream),
        returnValue: _i9.Stream<_i12.ConnectionStatus>.empty(),
      ) as _i9.Stream<_i12.ConnectionStatus>);

  @override
  _i12.ConnectionStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i12.ConnectionStatus.notConnected,
      ) as _i12.ConnectionStatus);

  @override
  _i9.Future<void> autoConnect() => (super.noSuchMethod(
        Invocation.method(
          #autoConnect,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> connect({_i5.StreamerBotConnectionData? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {#data: data},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> reconnect({
    _i5.StreamerBotConnectionData? data,
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reconnect,
          [],
          {
            #data: data,
            #force: force,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i5.StreamerBotConnectionData> loadData() => (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [],
        ),
        returnValue: _i9.Future<_i5.StreamerBotConnectionData>.value(
            _FakeStreamerBotConnectionData_3(
          this,
          Invocation.method(
            #loadData,
            [],
          ),
        )),
      ) as _i9.Future<_i5.StreamerBotConnectionData>);
}

/// A class which mocks [BindingActionIcons].
///
/// See the documentation for Mockito's code generation for more information.
class MockBindingActionIcons extends _i1.Mock
    implements _i13.BindingActionIcons {
  MockBindingActionIcons() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_4(
          this,
          Invocation.getter(#context),
        ),
      ) as _i6.BuildContext);

  @override
  _i6.Widget get system => (super.noSuchMethod(
        Invocation.getter(#system),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#system),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get website => (super.noSuchMethod(
        Invocation.getter(#website),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#website),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get launcFileOrApp => (super.noSuchMethod(
        Invocation.getter(#launcFileOrApp),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#launcFileOrApp),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get obs => (super.noSuchMethod(
        Invocation.getter(#obs),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#obs),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get setActiveScene => (super.noSuchMethod(
        Invocation.getter(#setActiveScene),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#setActiveScene),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get sourceMute => (super.noSuchMethod(
        Invocation.getter(#sourceMute),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#sourceMute),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get sourceVisibility => (super.noSuchMethod(
        Invocation.getter(#sourceVisibility),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#sourceVisibility),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get obsScreenshot => (super.noSuchMethod(
        Invocation.getter(#obsScreenshot),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#obsScreenshot),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get obsRecord => (super.noSuchMethod(
        Invocation.getter(#obsRecord),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#obsRecord),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get obsStream => (super.noSuchMethod(
        Invocation.getter(#obsStream),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#obsStream),
        ),
      ) as _i6.Widget);

  @override
  _i6.Widget get streamerbot => (super.noSuchMethod(
        Invocation.getter(#streamerbot),
        returnValue: _FakeWidget_5(
          this,
          Invocation.getter(#streamerbot),
        ),
      ) as _i6.Widget);
}
