// Mocks generated by Mockito 5.4.6 from annotations
// in streamkeys/test/action_library/record_or_stream_action_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:loggy/loggy.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:obs_websocket/obs_websocket.dart' as _i4;
import 'package:obs_websocket/request.dart' as _i5;
import 'package:streamkeys/common/models/connection_status.dart' as _i9;
import 'package:streamkeys/desktop/features/obs/data/models/obs_connection_data.dart'
    as _i2;
import 'package:streamkeys/desktop/features/obs/data/services/obs_service.dart'
    as _i7;
import 'package:web_socket_channel/web_socket_channel.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObsConnectionData_0 extends _i1.SmartFake
    implements _i2.ObsConnectionData {
  _FakeObsConnectionData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebSocketChannel_1 extends _i1.SmartFake
    implements _i3.WebSocketChannel {
  _FakeWebSocketChannel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFromJsonSingleton_2 extends _i1.SmartFake
    implements _i4.FromJsonSingleton {
  _FakeFromJsonSingleton_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfig_3 extends _i1.SmartFake implements _i5.Config {
  _FakeConfig_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilters_4 extends _i1.SmartFake implements _i5.Filters {
  _FakeFilters_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeneral_5 extends _i1.SmartFake implements _i5.General {
  _FakeGeneral_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInputs_6 extends _i1.SmartFake implements _i5.Inputs {
  _FakeInputs_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMediaInputs_7 extends _i1.SmartFake implements _i5.MediaInputs {
  _FakeMediaInputs_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutputs_8 extends _i1.SmartFake implements _i5.Outputs {
  _FakeOutputs_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecord_9 extends _i1.SmartFake implements _i5.Record {
  _FakeRecord_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScenes_10 extends _i1.SmartFake implements _i5.Scenes {
  _FakeScenes_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSceneItems_11 extends _i1.SmartFake implements _i5.SceneItems {
  _FakeSceneItems_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSources_12 extends _i1.SmartFake implements _i5.Sources {
  _FakeSources_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStream_13 extends _i1.SmartFake implements _i5.Stream {
  _FakeStream_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransitions_14 extends _i1.SmartFake implements _i5.Transitions {
  _FakeTransitions_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUi_15 extends _i1.SmartFake implements _i5.Ui {
  _FakeUi_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoggy_16<T extends _i6.LoggyType> extends _i1.SmartFake
    implements _i6.Loggy<T> {
  _FakeLoggy_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequestBatchResponse_17 extends _i1.SmartFake
    implements _i4.RequestBatchResponse {
  _FakeRequestBatchResponse_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObsWebSocket_18 extends _i1.SmartFake implements _i4.ObsWebSocket {
  _FakeObsWebSocket_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecordStatusResponse_19 extends _i1.SmartFake
    implements _i4.RecordStatusResponse {
  _FakeRecordStatusResponse_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamStatusResponse_20 extends _i1.SmartFake
    implements _i4.StreamStatusResponse {
  _FakeStreamStatusResponse_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ObsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockObsService extends _i1.Mock implements _i7.ObsService {
  MockObsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<_i9.ConnectionStatus> get connectionStream => (super.noSuchMethod(
        Invocation.getter(#connectionStream),
        returnValue: _i8.Stream<_i9.ConnectionStatus>.empty(),
      ) as _i8.Stream<_i9.ConnectionStatus>);

  @override
  _i9.ConnectionStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i9.ConnectionStatus.notConnected,
      ) as _i9.ConnectionStatus);

  @override
  set obs(_i4.ObsWebSocket? _obs) => super.noSuchMethod(
        Invocation.setter(
          #obs,
          _obs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> autoConnect() => (super.noSuchMethod(
        Invocation.method(
          #autoConnect,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> connect({_i2.ObsConnectionData? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {#data: data},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void startAutoReconnectTimer() => super.noSuchMethod(
        Invocation.method(
          #startAutoReconnectTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> reconnect({
    _i2.ObsConnectionData? data,
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reconnect,
          [],
          {
            #data: data,
            #force: force,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i2.ObsConnectionData> loadData() => (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [],
        ),
        returnValue:
            _i8.Future<_i2.ObsConnectionData>.value(_FakeObsConnectionData_0(
          this,
          Invocation.method(
            #loadData,
            [],
          ),
        )),
      ) as _i8.Future<_i2.ObsConnectionData>);
}

/// A class which mocks [ObsWebSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockObsWebSocket extends _i1.Mock implements _i4.ObsWebSocket {
  MockObsWebSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.WebSocketChannel get websocketChannel => (super.noSuchMethod(
        Invocation.getter(#websocketChannel),
        returnValue: _FakeWebSocketChannel_1(
          this,
          Invocation.getter(#websocketChannel),
        ),
      ) as _i3.WebSocketChannel);

  @override
  _i8.Stream<dynamic> get broadcastStream => (super.noSuchMethod(
        Invocation.getter(#broadcastStream),
        returnValue: _i8.Stream<dynamic>.empty(),
      ) as _i8.Stream<dynamic>);

  @override
  List<Function> get fallbackHandlers => (super.noSuchMethod(
        Invocation.getter(#fallbackHandlers),
        returnValue: <Function>[],
      ) as List<Function>);

  @override
  Map<String, List<Function>> get eventHandlers => (super.noSuchMethod(
        Invocation.getter(#eventHandlers),
        returnValue: <String, List<Function>>{},
      ) as Map<String, List<Function>>);

  @override
  _i4.FromJsonSingleton get fromJsonSingleton => (super.noSuchMethod(
        Invocation.getter(#fromJsonSingleton),
        returnValue: _FakeFromJsonSingleton_2(
          this,
          Invocation.getter(#fromJsonSingleton),
        ),
      ) as _i4.FromJsonSingleton);

  @override
  bool get handshakeComplete => (super.noSuchMethod(
        Invocation.getter(#handshakeComplete),
        returnValue: false,
      ) as bool);

  @override
  int get messageId => (super.noSuchMethod(
        Invocation.getter(#messageId),
        returnValue: 0,
      ) as int);

  @override
  int get negotiatedRpcVersion => (super.noSuchMethod(
        Invocation.getter(#negotiatedRpcVersion),
        returnValue: 0,
      ) as int);

  @override
  _i5.Config get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeConfig_3(
          this,
          Invocation.getter(#config),
        ),
      ) as _i5.Config);

  @override
  _i5.Filters get filters => (super.noSuchMethod(
        Invocation.getter(#filters),
        returnValue: _FakeFilters_4(
          this,
          Invocation.getter(#filters),
        ),
      ) as _i5.Filters);

  @override
  _i5.General get general => (super.noSuchMethod(
        Invocation.getter(#general),
        returnValue: _FakeGeneral_5(
          this,
          Invocation.getter(#general),
        ),
      ) as _i5.General);

  @override
  _i5.Inputs get inputs => (super.noSuchMethod(
        Invocation.getter(#inputs),
        returnValue: _FakeInputs_6(
          this,
          Invocation.getter(#inputs),
        ),
      ) as _i5.Inputs);

  @override
  _i5.MediaInputs get mediaInputs => (super.noSuchMethod(
        Invocation.getter(#mediaInputs),
        returnValue: _FakeMediaInputs_7(
          this,
          Invocation.getter(#mediaInputs),
        ),
      ) as _i5.MediaInputs);

  @override
  _i5.Outputs get outputs => (super.noSuchMethod(
        Invocation.getter(#outputs),
        returnValue: _FakeOutputs_8(
          this,
          Invocation.getter(#outputs),
        ),
      ) as _i5.Outputs);

  @override
  _i5.Record get record => (super.noSuchMethod(
        Invocation.getter(#record),
        returnValue: _FakeRecord_9(
          this,
          Invocation.getter(#record),
        ),
      ) as _i5.Record);

  @override
  _i5.Scenes get scenes => (super.noSuchMethod(
        Invocation.getter(#scenes),
        returnValue: _FakeScenes_10(
          this,
          Invocation.getter(#scenes),
        ),
      ) as _i5.Scenes);

  @override
  _i5.SceneItems get sceneItems => (super.noSuchMethod(
        Invocation.getter(#sceneItems),
        returnValue: _FakeSceneItems_11(
          this,
          Invocation.getter(#sceneItems),
        ),
      ) as _i5.SceneItems);

  @override
  _i5.Sources get sources => (super.noSuchMethod(
        Invocation.getter(#sources),
        returnValue: _FakeSources_12(
          this,
          Invocation.getter(#sources),
        ),
      ) as _i5.Sources);

  @override
  _i5.Stream get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _FakeStream_13(
          this,
          Invocation.getter(#stream),
        ),
      ) as _i5.Stream);

  @override
  _i5.Transitions get transitions => (super.noSuchMethod(
        Invocation.getter(#transitions),
        returnValue: _FakeTransitions_14(
          this,
          Invocation.getter(#transitions),
        ),
      ) as _i5.Transitions);

  @override
  _i5.Ui get ui => (super.noSuchMethod(
        Invocation.getter(#ui),
        returnValue: _FakeUi_15(
          this,
          Invocation.getter(#ui),
        ),
      ) as _i5.Ui);

  @override
  set handshakeComplete(bool? _handshakeComplete) => super.noSuchMethod(
        Invocation.setter(
          #handshakeComplete,
          _handshakeComplete,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set messageId(int? _messageId) => super.noSuchMethod(
        Invocation.setter(
          #messageId,
          _messageId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Loggy<_i6.UiLoggy> get loggy => (super.noSuchMethod(
        Invocation.getter(#loggy),
        returnValue: _FakeLoggy_16<_i6.UiLoggy>(
          this,
          Invocation.getter(#loggy),
        ),
      ) as _i6.Loggy<_i6.UiLoggy>);

  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> authenticate() => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.Opcode?> getStreamOpcode(int? webSocketOpCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStreamOpcode,
          [webSocketOpCode],
        ),
        returnValue: _i8.Future<_i4.Opcode?>.value(),
      ) as _i8.Future<_i4.Opcode?>);

  @override
  _i8.Future<_i4.Opcode?> sendOpcode(_i4.Opcode? opcode) => (super.noSuchMethod(
        Invocation.method(
          #sendOpcode,
          [opcode],
        ),
        returnValue: _i8.Future<_i4.Opcode?>.value(),
      ) as _i8.Future<_i4.Opcode?>);

  @override
  _i8.Future<void> listenForMask(int? eventSubscriptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenForMask,
          [eventSubscriptions],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> listen(dynamic eventSubscription) => (super.noSuchMethod(
        Invocation.method(
          #listen,
          [eventSubscription],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> subscribe(_i4.EventSubscription? eventSubscription) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [eventSubscription],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addHandler<T>(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #addHandler,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeHandler<T>(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #removeHandler,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addFallbackListener(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #addFallbackListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFallbackListener(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #removeFallbackListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i4.RequestResponse?> send(
    String? command, [
    Map<String, dynamic>? args,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [
            command,
            args,
          ],
        ),
        returnValue: _i8.Future<_i4.RequestResponse?>.value(),
      ) as _i8.Future<_i4.RequestResponse?>);

  @override
  _i8.Future<_i4.RequestBatchResponse> sendBatch(List<_i4.Request>? requests) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendBatch,
          [requests],
        ),
        returnValue: _i8.Future<_i4.RequestBatchResponse>.value(
            _FakeRequestBatchResponse_17(
          this,
          Invocation.method(
            #sendBatch,
            [requests],
          ),
        )),
      ) as _i8.Future<_i4.RequestBatchResponse>);

  @override
  _i8.Future<_i4.RequestResponse?> sendRequest(_i4.Request? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [request],
        ),
        returnValue: _i8.Future<_i4.RequestResponse?>.value(),
      ) as _i8.Future<_i4.RequestResponse?>);
}

/// A class which mocks [Record].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecord extends _i1.Mock implements _i5.Record {
  MockRecord() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ObsWebSocket get obsWebSocket => (super.noSuchMethod(
        Invocation.getter(#obsWebSocket),
        returnValue: _FakeObsWebSocket_18(
          this,
          Invocation.getter(#obsWebSocket),
        ),
      ) as _i4.ObsWebSocket);

  @override
  _i8.Future<_i4.RecordStatusResponse> get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i8.Future<_i4.RecordStatusResponse>.value(
            _FakeRecordStatusResponse_19(
          this,
          Invocation.getter(#status),
        )),
      ) as _i8.Future<_i4.RecordStatusResponse>);

  @override
  _i8.Future<_i4.RecordStatusResponse> getStatus() => (super.noSuchMethod(
        Invocation.method(
          #getStatus,
          [],
        ),
        returnValue: _i8.Future<_i4.RecordStatusResponse>.value(
            _FakeRecordStatusResponse_19(
          this,
          Invocation.method(
            #getStatus,
            [],
          ),
        )),
      ) as _i8.Future<_i4.RecordStatusResponse>);

  @override
  _i8.Future<_i4.RecordStatusResponse> getRecordStatus() => (super.noSuchMethod(
        Invocation.method(
          #getRecordStatus,
          [],
        ),
        returnValue: _i8.Future<_i4.RecordStatusResponse>.value(
            _FakeRecordStatusResponse_19(
          this,
          Invocation.method(
            #getRecordStatus,
            [],
          ),
        )),
      ) as _i8.Future<_i4.RecordStatusResponse>);

  @override
  _i8.Future<void> toggleRecord() => (super.noSuchMethod(
        Invocation.method(
          #toggleRecord,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> toggle() => (super.noSuchMethod(
        Invocation.method(
          #toggle,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> startRecord() => (super.noSuchMethod(
        Invocation.method(
          #startRecord,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> stopRecord() => (super.noSuchMethod(
        Invocation.method(
          #stopRecord,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #stopRecord,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<String> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #stop,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> toggleRecordPause() => (super.noSuchMethod(
        Invocation.method(
          #toggleRecordPause,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> togglePause() => (super.noSuchMethod(
        Invocation.method(
          #togglePause,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> pauseRecord() => (super.noSuchMethod(
        Invocation.method(
          #pauseRecord,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> resumeRecord() => (super.noSuchMethod(
        Invocation.method(
          #resumeRecord,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [Stream].
///
/// See the documentation for Mockito's code generation for more information.
class MockStream extends _i1.Mock implements _i5.Stream {
  MockStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ObsWebSocket get obsWebSocket => (super.noSuchMethod(
        Invocation.getter(#obsWebSocket),
        returnValue: _FakeObsWebSocket_18(
          this,
          Invocation.getter(#obsWebSocket),
        ),
      ) as _i4.ObsWebSocket);

  @override
  _i8.Future<_i4.StreamStatusResponse> get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i8.Future<_i4.StreamStatusResponse>.value(
            _FakeStreamStatusResponse_20(
          this,
          Invocation.getter(#status),
        )),
      ) as _i8.Future<_i4.StreamStatusResponse>);

  @override
  _i8.Future<_i4.StreamStatusResponse> get getStatus => (super.noSuchMethod(
        Invocation.getter(#getStatus),
        returnValue: _i8.Future<_i4.StreamStatusResponse>.value(
            _FakeStreamStatusResponse_20(
          this,
          Invocation.getter(#getStatus),
        )),
      ) as _i8.Future<_i4.StreamStatusResponse>);

  @override
  _i8.Future<_i4.StreamStatusResponse> getStreamStatus() => (super.noSuchMethod(
        Invocation.method(
          #getStreamStatus,
          [],
        ),
        returnValue: _i8.Future<_i4.StreamStatusResponse>.value(
            _FakeStreamStatusResponse_20(
          this,
          Invocation.method(
            #getStreamStatus,
            [],
          ),
        )),
      ) as _i8.Future<_i4.StreamStatusResponse>);

  @override
  _i8.Future<bool> toggleStream() => (super.noSuchMethod(
        Invocation.method(
          #toggleStream,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> toggle() => (super.noSuchMethod(
        Invocation.method(
          #toggle,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> startStream() => (super.noSuchMethod(
        Invocation.method(
          #startStream,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> stopStream() => (super.noSuchMethod(
        Invocation.method(
          #stopStream,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendStreamCaption(String? captionText) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendStreamCaption,
          [captionText],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
