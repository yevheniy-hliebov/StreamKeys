// Mocks generated by Mockito 5.4.6 from annotations
// in streamkeys/test/action_library/screenshot_action_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i13;

import 'package:file_picker/file_picker.dart' as _i12;
import 'package:loggy/loggy.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:obs_websocket/obs_websocket.dart' as _i3;
import 'package:obs_websocket/request.dart' as _i4;
import 'package:streamkeys/common/models/connection_status.dart' as _i8;
import 'package:streamkeys/desktop/features/obs/data/services/obs_service.dart'
    as _i6;
import 'package:streamkeys/desktop/utils/file_manager.dart' as _i11;
import 'package:streamkeys/desktop/utils/sound_service.dart' as _i10;
import 'package:web_socket_channel/web_socket_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketChannel_0 extends _i1.SmartFake
    implements _i2.WebSocketChannel {
  _FakeWebSocketChannel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFromJsonSingleton_1 extends _i1.SmartFake
    implements _i3.FromJsonSingleton {
  _FakeFromJsonSingleton_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfig_2 extends _i1.SmartFake implements _i4.Config {
  _FakeConfig_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFilters_3 extends _i1.SmartFake implements _i4.Filters {
  _FakeFilters_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeneral_4 extends _i1.SmartFake implements _i4.General {
  _FakeGeneral_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInputs_5 extends _i1.SmartFake implements _i4.Inputs {
  _FakeInputs_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMediaInputs_6 extends _i1.SmartFake implements _i4.MediaInputs {
  _FakeMediaInputs_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutputs_7 extends _i1.SmartFake implements _i4.Outputs {
  _FakeOutputs_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecord_8 extends _i1.SmartFake implements _i4.Record {
  _FakeRecord_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScenes_9 extends _i1.SmartFake implements _i4.Scenes {
  _FakeScenes_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSceneItems_10 extends _i1.SmartFake implements _i4.SceneItems {
  _FakeSceneItems_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSources_11 extends _i1.SmartFake implements _i4.Sources {
  _FakeSources_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStream_12 extends _i1.SmartFake implements _i4.Stream {
  _FakeStream_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransitions_13 extends _i1.SmartFake implements _i4.Transitions {
  _FakeTransitions_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUi_14 extends _i1.SmartFake implements _i4.Ui {
  _FakeUi_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoggy_15<T extends _i5.LoggyType> extends _i1.SmartFake
    implements _i5.Loggy<T> {
  _FakeLoggy_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequestBatchResponse_16 extends _i1.SmartFake
    implements _i3.RequestBatchResponse {
  _FakeRequestBatchResponse_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObsWebSocket_17 extends _i1.SmartFake implements _i3.ObsWebSocket {
  _FakeObsWebSocket_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSceneListResponse_18 extends _i1.SmartFake
    implements _i3.SceneListResponse {
  _FakeSceneListResponse_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSceneSceneTransitionOverrideResponse_19 extends _i1.SmartFake
    implements _i3.SceneSceneTransitionOverrideResponse {
  _FakeSceneSceneTransitionOverrideResponse_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSourceActiveResponse_20 extends _i1.SmartFake
    implements _i3.SourceActiveResponse {
  _FakeSourceActiveResponse_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSourceScreenshotResponse_21 extends _i1.SmartFake
    implements _i3.SourceScreenshotResponse {
  _FakeSourceScreenshotResponse_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ObsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockObsService extends _i1.Mock implements _i6.ObsService {
  MockObsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i8.ConnectionStatus> get connectionStream => (super.noSuchMethod(
        Invocation.getter(#connectionStream),
        returnValue: _i7.Stream<_i8.ConnectionStatus>.empty(),
      ) as _i7.Stream<_i8.ConnectionStatus>);

  @override
  _i8.ConnectionStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i8.ConnectionStatus.notConnected,
      ) as _i8.ConnectionStatus);

  @override
  set obs(_i3.ObsWebSocket? _obs) => super.noSuchMethod(
        Invocation.setter(
          #obs,
          _obs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void startAutoReconnectTimer() => super.noSuchMethod(
        Invocation.method(
          #startAutoReconnectTimer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> reconnect({bool? force = false}) => (super.noSuchMethod(
        Invocation.method(
          #reconnect,
          [],
          {#force: force},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [ObsWebSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockObsWebSocket extends _i1.Mock implements _i3.ObsWebSocket {
  MockObsWebSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebSocketChannel get websocketChannel => (super.noSuchMethod(
        Invocation.getter(#websocketChannel),
        returnValue: _FakeWebSocketChannel_0(
          this,
          Invocation.getter(#websocketChannel),
        ),
      ) as _i2.WebSocketChannel);

  @override
  _i7.Stream<dynamic> get broadcastStream => (super.noSuchMethod(
        Invocation.getter(#broadcastStream),
        returnValue: _i7.Stream<dynamic>.empty(),
      ) as _i7.Stream<dynamic>);

  @override
  List<Function> get fallbackHandlers => (super.noSuchMethod(
        Invocation.getter(#fallbackHandlers),
        returnValue: <Function>[],
      ) as List<Function>);

  @override
  Map<String, List<Function>> get eventHandlers => (super.noSuchMethod(
        Invocation.getter(#eventHandlers),
        returnValue: <String, List<Function>>{},
      ) as Map<String, List<Function>>);

  @override
  _i3.FromJsonSingleton get fromJsonSingleton => (super.noSuchMethod(
        Invocation.getter(#fromJsonSingleton),
        returnValue: _FakeFromJsonSingleton_1(
          this,
          Invocation.getter(#fromJsonSingleton),
        ),
      ) as _i3.FromJsonSingleton);

  @override
  bool get handshakeComplete => (super.noSuchMethod(
        Invocation.getter(#handshakeComplete),
        returnValue: false,
      ) as bool);

  @override
  int get messageId => (super.noSuchMethod(
        Invocation.getter(#messageId),
        returnValue: 0,
      ) as int);

  @override
  int get negotiatedRpcVersion => (super.noSuchMethod(
        Invocation.getter(#negotiatedRpcVersion),
        returnValue: 0,
      ) as int);

  @override
  _i4.Config get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeConfig_2(
          this,
          Invocation.getter(#config),
        ),
      ) as _i4.Config);

  @override
  _i4.Filters get filters => (super.noSuchMethod(
        Invocation.getter(#filters),
        returnValue: _FakeFilters_3(
          this,
          Invocation.getter(#filters),
        ),
      ) as _i4.Filters);

  @override
  _i4.General get general => (super.noSuchMethod(
        Invocation.getter(#general),
        returnValue: _FakeGeneral_4(
          this,
          Invocation.getter(#general),
        ),
      ) as _i4.General);

  @override
  _i4.Inputs get inputs => (super.noSuchMethod(
        Invocation.getter(#inputs),
        returnValue: _FakeInputs_5(
          this,
          Invocation.getter(#inputs),
        ),
      ) as _i4.Inputs);

  @override
  _i4.MediaInputs get mediaInputs => (super.noSuchMethod(
        Invocation.getter(#mediaInputs),
        returnValue: _FakeMediaInputs_6(
          this,
          Invocation.getter(#mediaInputs),
        ),
      ) as _i4.MediaInputs);

  @override
  _i4.Outputs get outputs => (super.noSuchMethod(
        Invocation.getter(#outputs),
        returnValue: _FakeOutputs_7(
          this,
          Invocation.getter(#outputs),
        ),
      ) as _i4.Outputs);

  @override
  _i4.Record get record => (super.noSuchMethod(
        Invocation.getter(#record),
        returnValue: _FakeRecord_8(
          this,
          Invocation.getter(#record),
        ),
      ) as _i4.Record);

  @override
  _i4.Scenes get scenes => (super.noSuchMethod(
        Invocation.getter(#scenes),
        returnValue: _FakeScenes_9(
          this,
          Invocation.getter(#scenes),
        ),
      ) as _i4.Scenes);

  @override
  _i4.SceneItems get sceneItems => (super.noSuchMethod(
        Invocation.getter(#sceneItems),
        returnValue: _FakeSceneItems_10(
          this,
          Invocation.getter(#sceneItems),
        ),
      ) as _i4.SceneItems);

  @override
  _i4.Sources get sources => (super.noSuchMethod(
        Invocation.getter(#sources),
        returnValue: _FakeSources_11(
          this,
          Invocation.getter(#sources),
        ),
      ) as _i4.Sources);

  @override
  _i4.Stream get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _FakeStream_12(
          this,
          Invocation.getter(#stream),
        ),
      ) as _i4.Stream);

  @override
  _i4.Transitions get transitions => (super.noSuchMethod(
        Invocation.getter(#transitions),
        returnValue: _FakeTransitions_13(
          this,
          Invocation.getter(#transitions),
        ),
      ) as _i4.Transitions);

  @override
  _i4.Ui get ui => (super.noSuchMethod(
        Invocation.getter(#ui),
        returnValue: _FakeUi_14(
          this,
          Invocation.getter(#ui),
        ),
      ) as _i4.Ui);

  @override
  set handshakeComplete(bool? _handshakeComplete) => super.noSuchMethod(
        Invocation.setter(
          #handshakeComplete,
          _handshakeComplete,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set messageId(int? _messageId) => super.noSuchMethod(
        Invocation.setter(
          #messageId,
          _messageId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Loggy<_i5.UiLoggy> get loggy => (super.noSuchMethod(
        Invocation.getter(#loggy),
        returnValue: _FakeLoggy_15<_i5.UiLoggy>(
          this,
          Invocation.getter(#loggy),
        ),
      ) as _i5.Loggy<_i5.UiLoggy>);

  @override
  _i7.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> authenticate() => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i3.Opcode?> getStreamOpcode(int? webSocketOpCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStreamOpcode,
          [webSocketOpCode],
        ),
        returnValue: _i7.Future<_i3.Opcode?>.value(),
      ) as _i7.Future<_i3.Opcode?>);

  @override
  _i7.Future<_i3.Opcode?> sendOpcode(_i3.Opcode? opcode) => (super.noSuchMethod(
        Invocation.method(
          #sendOpcode,
          [opcode],
        ),
        returnValue: _i7.Future<_i3.Opcode?>.value(),
      ) as _i7.Future<_i3.Opcode?>);

  @override
  _i7.Future<void> listenForMask(int? eventSubscriptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenForMask,
          [eventSubscriptions],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> listen(dynamic eventSubscription) => (super.noSuchMethod(
        Invocation.method(
          #listen,
          [eventSubscription],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> subscribe(_i3.EventSubscription? eventSubscription) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [eventSubscription],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addHandler<T>(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #addHandler,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeHandler<T>(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #removeHandler,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addFallbackListener(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #addFallbackListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFallbackListener(Function? listener) => super.noSuchMethod(
        Invocation.method(
          #removeFallbackListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i3.RequestResponse?> send(
    String? command, [
    Map<String, dynamic>? args,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [
            command,
            args,
          ],
        ),
        returnValue: _i7.Future<_i3.RequestResponse?>.value(),
      ) as _i7.Future<_i3.RequestResponse?>);

  @override
  _i7.Future<_i3.RequestBatchResponse> sendBatch(List<_i3.Request>? requests) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendBatch,
          [requests],
        ),
        returnValue: _i7.Future<_i3.RequestBatchResponse>.value(
            _FakeRequestBatchResponse_16(
          this,
          Invocation.method(
            #sendBatch,
            [requests],
          ),
        )),
      ) as _i7.Future<_i3.RequestBatchResponse>);

  @override
  _i7.Future<_i3.RequestResponse?> sendRequest(_i3.Request? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [request],
        ),
        returnValue: _i7.Future<_i3.RequestResponse?>.value(),
      ) as _i7.Future<_i3.RequestResponse?>);
}

/// A class which mocks [Scenes].
///
/// See the documentation for Mockito's code generation for more information.
class MockScenes extends _i1.Mock implements _i4.Scenes {
  MockScenes() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ObsWebSocket get obsWebSocket => (super.noSuchMethod(
        Invocation.getter(#obsWebSocket),
        returnValue: _FakeObsWebSocket_17(
          this,
          Invocation.getter(#obsWebSocket),
        ),
      ) as _i3.ObsWebSocket);

  @override
  _i7.Future<_i3.SceneListResponse> getSceneList() => (super.noSuchMethod(
        Invocation.method(
          #getSceneList,
          [],
        ),
        returnValue:
            _i7.Future<_i3.SceneListResponse>.value(_FakeSceneListResponse_18(
          this,
          Invocation.method(
            #getSceneList,
            [],
          ),
        )),
      ) as _i7.Future<_i3.SceneListResponse>);

  @override
  _i7.Future<_i3.SceneListResponse> getList() => (super.noSuchMethod(
        Invocation.method(
          #getList,
          [],
        ),
        returnValue:
            _i7.Future<_i3.SceneListResponse>.value(_FakeSceneListResponse_18(
          this,
          Invocation.method(
            #getList,
            [],
          ),
        )),
      ) as _i7.Future<_i3.SceneListResponse>);

  @override
  _i7.Future<_i3.SceneListResponse> list() => (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
        ),
        returnValue:
            _i7.Future<_i3.SceneListResponse>.value(_FakeSceneListResponse_18(
          this,
          Invocation.method(
            #list,
            [],
          ),
        )),
      ) as _i7.Future<_i3.SceneListResponse>);

  @override
  _i7.Future<List<String>> getGroupList() => (super.noSuchMethod(
        Invocation.method(
          #getGroupList,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<List<String>> groupList() => (super.noSuchMethod(
        Invocation.method(
          #groupList,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<String> getCurrentProgramScene() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentProgramScene,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentProgramScene,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<String> getCurrentProgram() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentProgram,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentProgram,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<void> setCurrentProgramScene(String? sceneName) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCurrentProgramScene,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setCurrentProgram(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #setCurrentProgram,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String> getCurrentPreviewScene() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPreviewScene,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentPreviewScene,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<String> getCurrentPreview() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPreview,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentPreview,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<void> setCurrentPreviewScene(String? sceneName) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCurrentPreviewScene,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setCurrentPreview(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #setCurrentPreview,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> createScene(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #createScene,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> create(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeScene(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #removeScene,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> remove(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setSceneName(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #setSceneName,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> set(String? sceneName) => (super.noSuchMethod(
        Invocation.method(
          #set,
          [sceneName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i3.SceneSceneTransitionOverrideResponse>
      getSceneSceneTransitionOverride(String? sceneName) => (super.noSuchMethod(
            Invocation.method(
              #getSceneSceneTransitionOverride,
              [sceneName],
            ),
            returnValue:
                _i7.Future<_i3.SceneSceneTransitionOverrideResponse>.value(
                    _FakeSceneSceneTransitionOverrideResponse_19(
              this,
              Invocation.method(
                #getSceneSceneTransitionOverride,
                [sceneName],
              ),
            )),
          ) as _i7.Future<_i3.SceneSceneTransitionOverrideResponse>);

  @override
  _i7.Future<void> setSceneSceneTransitionOverride(
    String? sceneName, {
    String? transitionName,
    int? transitionDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSceneSceneTransitionOverride,
          [sceneName],
          {
            #transitionName: transitionName,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [Sources].
///
/// See the documentation for Mockito's code generation for more information.
class MockSources extends _i1.Mock implements _i4.Sources {
  MockSources() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ObsWebSocket get obsWebSocket => (super.noSuchMethod(
        Invocation.getter(#obsWebSocket),
        returnValue: _FakeObsWebSocket_17(
          this,
          Invocation.getter(#obsWebSocket),
        ),
      ) as _i3.ObsWebSocket);

  @override
  _i7.Future<_i3.SourceActiveResponse> getSourceActive(String? sourceName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSourceActive,
          [sourceName],
        ),
        returnValue: _i7.Future<_i3.SourceActiveResponse>.value(
            _FakeSourceActiveResponse_20(
          this,
          Invocation.method(
            #getSourceActive,
            [sourceName],
          ),
        )),
      ) as _i7.Future<_i3.SourceActiveResponse>);

  @override
  _i7.Future<_i3.SourceActiveResponse> active(String? sourceName) =>
      (super.noSuchMethod(
        Invocation.method(
          #active,
          [sourceName],
        ),
        returnValue: _i7.Future<_i3.SourceActiveResponse>.value(
            _FakeSourceActiveResponse_20(
          this,
          Invocation.method(
            #active,
            [sourceName],
          ),
        )),
      ) as _i7.Future<_i3.SourceActiveResponse>);

  @override
  _i7.Future<_i3.SourceScreenshotResponse> getSourceScreenshot(
          _i3.SourceScreenshot? sourceScreenshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSourceScreenshot,
          [sourceScreenshot],
        ),
        returnValue: _i7.Future<_i3.SourceScreenshotResponse>.value(
            _FakeSourceScreenshotResponse_21(
          this,
          Invocation.method(
            #getSourceScreenshot,
            [sourceScreenshot],
          ),
        )),
      ) as _i7.Future<_i3.SourceScreenshotResponse>);

  @override
  _i7.Future<_i3.SourceScreenshotResponse> screenshot(
          _i3.SourceScreenshot? sourceScreenshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #screenshot,
          [sourceScreenshot],
        ),
        returnValue: _i7.Future<_i3.SourceScreenshotResponse>.value(
            _FakeSourceScreenshotResponse_21(
          this,
          Invocation.method(
            #screenshot,
            [sourceScreenshot],
          ),
        )),
      ) as _i7.Future<_i3.SourceScreenshotResponse>);

  @override
  _i7.Future<_i3.SourceScreenshotResponse> saveSourceScreenshot(
          _i3.SourceScreenshot? sourceScreenshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSourceScreenshot,
          [sourceScreenshot],
        ),
        returnValue: _i7.Future<_i3.SourceScreenshotResponse>.value(
            _FakeSourceScreenshotResponse_21(
          this,
          Invocation.method(
            #saveSourceScreenshot,
            [sourceScreenshot],
          ),
        )),
      ) as _i7.Future<_i3.SourceScreenshotResponse>);

  @override
  _i7.Future<_i3.SourceScreenshotResponse> saveScreenshot(
          _i3.SourceScreenshot? sourceScreenshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveScreenshot,
          [sourceScreenshot],
        ),
        returnValue: _i7.Future<_i3.SourceScreenshotResponse>.value(
            _FakeSourceScreenshotResponse_21(
          this,
          Invocation.method(
            #saveScreenshot,
            [sourceScreenshot],
          ),
        )),
      ) as _i7.Future<_i3.SourceScreenshotResponse>);
}

/// A class which mocks [SoundService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundService extends _i1.Mock implements _i10.SoundService {
  MockSoundService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> playTick() => (super.noSuchMethod(
        Invocation.method(
          #playTick,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> countdownTick(
    Duration? delay, {
    required bool? playSound,
    void Function(int)? onTick,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #countdownTick,
          [delay],
          {
            #playSound: playSound,
            #onTick: onTick,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> playShutter() => (super.noSuchMethod(
        Invocation.method(
          #playShutter,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [FileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileManager extends _i1.Mock implements _i11.FileManager {
  MockFileManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String?> pickFile({_i12.FileType? type = _i12.FileType.any}) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFile,
          [],
          {#type: type},
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<String?> pickDirectory() => (super.noSuchMethod(
        Invocation.method(
          #pickDirectory,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i13.Uint8List decodeBase64Image(String? imageData) => (super.noSuchMethod(
        Invocation.method(
          #decodeBase64Image,
          [imageData],
        ),
        returnValue: _i13.Uint8List(0),
      ) as _i13.Uint8List);

  @override
  _i7.Future<String> saveScreenshot({
    String? recordingPath = 'C:/Screenshots',
    required _i13.Uint8List? bytes,
    required String? fileNamePart,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveScreenshot,
          [],
          {
            #recordingPath: recordingPath,
            #bytes: bytes,
            #fileNamePart: fileNamePart,
          },
        ),
        returnValue: _i7.Future<String>.value(_i9.dummyValue<String>(
          this,
          Invocation.method(
            #saveScreenshot,
            [],
            {
              #recordingPath: recordingPath,
              #bytes: bytes,
              #fileNamePart: fileNamePart,
            },
          ),
        )),
      ) as _i7.Future<String>);
}
